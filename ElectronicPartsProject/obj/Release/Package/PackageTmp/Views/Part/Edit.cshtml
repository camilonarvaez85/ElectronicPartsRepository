@model ElectronicPartsProject.Models.DBElectronicPartsModel.part

<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<style>
    .ui-autocomplete {
        z-index: 1051; /* Asegura que el autocompletar esté sobre el modal */
    }
</style>

<br />
@using (Html.BeginForm("Edit", "Part", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @* @Html.AntiForgeryToken() *@

    <div class="form-horizontal">
        <h4>Edit Part</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.part_id)

        <!-- Part Number -->
        <div class="form-group">
            @Html.LabelFor(model => model.part_number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.part_number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.part_number, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Description -->
        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Component Value -->
        <div class="form-group">
            @Html.LabelFor(model => model.component_value, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.component_value, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.component_value, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Footprint -->
        <div class="form-group">
            @Html.LabelFor(model => model.footprint, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.footprint, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.footprint, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Package Code -->
        <div class="form-group">
            @Html.LabelFor(model => model.pkg_code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.pkg_code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pkg_code, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Schematic Symbol File -->
        <div class="form-group">
            @Html.LabelFor(model => model.schematic_symbol_file, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.schematic_symbol_file, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.schematic_symbol_file, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Value -->
        <div class="form-group">
            @Html.LabelFor(model => model.value, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.value, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.value, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Is Active Checkbox -->
        <div class="form-group">
            @Html.LabelFor(model => model.is_active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.is_active)
                @Html.ValidationMessageFor(model => model.is_active, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Category DropDownList -->
        <div class="form-group">
            @Html.LabelFor(model => model.category_id, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("category_id", null, "Select Category", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- File Attachments - Existing Files -->
        <div class="form-group">
            <label class="control-label col-md-2">Existing Files</label>
            <div class="col-md-10">
                @if (Model.files != null && Model.files.Any())
                {
                    <ul>
                        @foreach (var file in Model.files)
                        {
                            <li>
                                <a href="@Url.Action("DownloadFile", "Part", new { fileId = file.file_id })" target="_blank">@file.file_name</a>
                                <a href="@Url.Action("DeleteFile", "Part", new { id = file.file_id })" class="btn btn-danger btn-sm">Delete</a>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No files attached.</p>
                }
            </div>
        </div>

        <!-- Add New Files -->
        <div class="form-group">
            <label class="control-label col-md-2">Add New Files</label>
            <div class="col-md-10">
                <input type="file" name="newFiles" multiple class="form-control" />
            </div>
        </div>

        <!-- Tabla de Proveedores Asociados con Botón de Adición -->
        <div class="form-group">
            <label class="control-label col-md-2">Associated Suppliers</label>
            <div class="col-md-10">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addSupplierModal">Add Supplier</button>

                <table class="table table-striped mt-3">
                    <thead>
                        <tr>
                            <th>Supplier Name</th>
                            <th>Manufacturer Part Number</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="supplierList">
                        @*@foreach (var supplierPart in Model.supplier_parts)
                            {
                                <tr id="supplierRow_@supplierPart.supplier_id">
                                    <td>@supplierPart.supplier.supplier_name</td>
                                    <td>@supplierPart.manufacturer_part_number</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="removeExistingSupplier(@supplierPart.supplier_id, @Model.part_id)">Delete</button>
                                    </td>
                                </tr>
                            }*@
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Botón de Guardado -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" onclick="submitForm()" />
            </div>
        </div>
    </div>

}
<div>
    @Html.ActionLink("Back to Details", "Detail", "Part", new { id = Model.part_id }, new { @class = "btn btn-default" })
</div>



<div class="modal fade" id="addSupplierModal" tabindex="-1" role="dialog" aria-labelledby="addSupplierModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSupplierModalLabel">Add Supplier</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="supplierForm">
                    <!-- Supplier Name (Autocomplete) -->
                    <div class="form-group">
                        <label for="supplierName">Supplier Name</label>
                        <input type="text" class="form-control" id="supplierName" required autocomplete="on">
                    </div>
                    <!-- Manufacturer Part Number (Autocomplete) -->
                    <div class="form-group">
                        <label for="manufacturerPartNumber">Manufacturer Part Number</label>
                        <input type="text" class="form-control" id="manufacturerPartNumber" required autocomplete="on">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addSupplier()">Save Supplier</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- jQuery y jQuery UI para Autocomplete -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let supplierParts = [];           // Array para proveedores en la interfaz
        let suppliersToAdd = [];          // Proveedores nuevos a agregar en el backend
        let suppliersToDelete = [];       // Proveedores a eliminar en el backend

        $(document).ready(function () {
            // Cargar suppliers existentes desde el ViewBag
            const existingSuppliers = @Html.Raw(ViewBag.ExistingSupplierParts);
            supplierParts = existingSuppliers ? existingSuppliers : [];

            updateSupplierTable(); // Actualizar la tabla de suppliers en la interfaz
        });

        function addSupplier() {
            const supplierName = $('#supplierName').val();
            const manufacturerPartNumber = $('#manufacturerPartNumber').val();

            if (supplierName && manufacturerPartNumber) {
                const newSupplier = {
                    supplier: { supplier_name: supplierName },
                    manufacturer_part_number: manufacturerPartNumber
                };

                supplierParts.push(newSupplier);     // Añadir a la interfaz
                suppliersToAdd.push(newSupplier);    // Añadir a los nuevos a agregar

                $('#supplierName').val('');
                $('#manufacturerPartNumber').val('');
                updateSupplierTable();
                $('#addSupplierModal').modal('hide');
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open');
            }
        }

        function removeSupplierPart(index) {
            const supplierToDelete = supplierParts[index];

            if (supplierToDelete) {
                suppliersToDelete.push(supplierToDelete); // Guardar objeto completo para eliminación
            }

            // Eliminar del array de suppliers general y actualizar la tabla
            supplierParts.splice(index, 1);
            updateSupplierTable();
        }

        function updateSupplierTable() {
            const supplierList = $('#supplierList');
            supplierList.empty();

            supplierParts.forEach((supplier, index) => {
                const row = `<tr>
                                <td>${supplier.supplier.supplier_name}</td>
                                <td>${supplier.manufacturer_part_number}</td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="removeSupplierPart(${index})">Delete</button>
                                </td>
                             </tr>`;
                supplierList.append(row);
            });
        }

        function submitForm() {
            $('<input>').attr({
                type: 'hidden',
                name: 'suppliersToAdd',
                value: JSON.stringify(suppliersToAdd)
            }).appendTo('form');

            $('<input>').attr({
                type: 'hidden',
                name: 'suppliersToDelete',
                value: JSON.stringify(suppliersToDelete)
            }).appendTo('form');
        }

        // Autocomplete para Supplier Name
        $("#supplierName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetSuppliers", "Supplier")',
                    data: { term: request.term },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 1
        });

        // Autocomplete para Manufacturer Part Number
        $("#manufacturerPartNumber").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetManufacturerPartNumbers", "Supplier")',
                    data: { term: request.term },
                    success: function (data) {
                        response(data);
                    }
                });
            },
            minLength: 1
        });
    </script>
}
